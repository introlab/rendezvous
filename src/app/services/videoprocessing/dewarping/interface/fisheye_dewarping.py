# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fisheye_dewarping')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fisheye_dewarping')
    _fisheye_dewarping = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fisheye_dewarping', [dirname(__file__)])
        except ImportError:
            import _fisheye_dewarping
            return _fisheye_dewarping
        try:
            _mod = imp.load_module('_fisheye_dewarping', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fisheye_dewarping = swig_import_helper()
    del swig_import_helper
else:
    import _fisheye_dewarping
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class FisheyeDewarping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FisheyeDewarping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FisheyeDewarping, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fisheye_dewarping.new_FisheyeDewarping()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fisheye_dewarping.delete_FisheyeDewarping
    __del__ = lambda self: None

    def initialize(self, inputWidth, inputeight, outputWidth, outputHeight, channels, isDewarping=True):
        return _fisheye_dewarping.FisheyeDewarping_initialize(self, inputWidth, inputeight, outputWidth, outputHeight, channels, isDewarping)

    def setDewarpingParameters(self, dewarpingParameters):
        return _fisheye_dewarping.FisheyeDewarping_setDewarpingParameters(self, dewarpingParameters)

    def loadFisheyeImage(self, width):
        return _fisheye_dewarping.FisheyeDewarping_loadFisheyeImage(self, width)

    def dewarpImage(self, width):
        return _fisheye_dewarping.FisheyeDewarping_dewarpImage(self, width)
FisheyeDewarping_swigregister = _fisheye_dewarping.FisheyeDewarping_swigregister
FisheyeDewarping_swigregister(FisheyeDewarping)

class DonutSlice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DonutSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DonutSlice, name)
    __repr__ = _swig_repr

    def __init__(self, xCenter, yCenter, inRadius, outRadius, middleAngle, angleSpan):
        this = _fisheye_dewarping.new_DonutSlice(xCenter, yCenter, inRadius, outRadius, middleAngle, angleSpan)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["xCenter"] = _fisheye_dewarping.DonutSlice_xCenter_set
    __swig_getmethods__["xCenter"] = _fisheye_dewarping.DonutSlice_xCenter_get
    if _newclass:
        xCenter = _swig_property(_fisheye_dewarping.DonutSlice_xCenter_get, _fisheye_dewarping.DonutSlice_xCenter_set)
    __swig_setmethods__["yCenter"] = _fisheye_dewarping.DonutSlice_yCenter_set
    __swig_getmethods__["yCenter"] = _fisheye_dewarping.DonutSlice_yCenter_get
    if _newclass:
        yCenter = _swig_property(_fisheye_dewarping.DonutSlice_yCenter_get, _fisheye_dewarping.DonutSlice_yCenter_set)
    __swig_setmethods__["inRadius"] = _fisheye_dewarping.DonutSlice_inRadius_set
    __swig_getmethods__["inRadius"] = _fisheye_dewarping.DonutSlice_inRadius_get
    if _newclass:
        inRadius = _swig_property(_fisheye_dewarping.DonutSlice_inRadius_get, _fisheye_dewarping.DonutSlice_inRadius_set)
    __swig_setmethods__["outRadius"] = _fisheye_dewarping.DonutSlice_outRadius_set
    __swig_getmethods__["outRadius"] = _fisheye_dewarping.DonutSlice_outRadius_get
    if _newclass:
        outRadius = _swig_property(_fisheye_dewarping.DonutSlice_outRadius_get, _fisheye_dewarping.DonutSlice_outRadius_set)
    __swig_setmethods__["middleAngle"] = _fisheye_dewarping.DonutSlice_middleAngle_set
    __swig_getmethods__["middleAngle"] = _fisheye_dewarping.DonutSlice_middleAngle_get
    if _newclass:
        middleAngle = _swig_property(_fisheye_dewarping.DonutSlice_middleAngle_get, _fisheye_dewarping.DonutSlice_middleAngle_set)
    __swig_setmethods__["angleSpan"] = _fisheye_dewarping.DonutSlice_angleSpan_set
    __swig_getmethods__["angleSpan"] = _fisheye_dewarping.DonutSlice_angleSpan_get
    if _newclass:
        angleSpan = _swig_property(_fisheye_dewarping.DonutSlice_angleSpan_get, _fisheye_dewarping.DonutSlice_angleSpan_set)
    __swig_destroy__ = _fisheye_dewarping.delete_DonutSlice
    __del__ = lambda self: None
DonutSlice_swigregister = _fisheye_dewarping.DonutSlice_swigregister
DonutSlice_swigregister(DonutSlice)

class DewarpingParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DewarpingParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DewarpingParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fisheye_dewarping.new_DewarpingParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["xCenter"] = _fisheye_dewarping.DewarpingParameters_xCenter_set
    __swig_getmethods__["xCenter"] = _fisheye_dewarping.DewarpingParameters_xCenter_get
    if _newclass:
        xCenter = _swig_property(_fisheye_dewarping.DewarpingParameters_xCenter_get, _fisheye_dewarping.DewarpingParameters_xCenter_set)
    __swig_setmethods__["yCenter"] = _fisheye_dewarping.DewarpingParameters_yCenter_set
    __swig_getmethods__["yCenter"] = _fisheye_dewarping.DewarpingParameters_yCenter_get
    if _newclass:
        yCenter = _swig_property(_fisheye_dewarping.DewarpingParameters_yCenter_get, _fisheye_dewarping.DewarpingParameters_yCenter_set)
    __swig_setmethods__["dewarpWidth"] = _fisheye_dewarping.DewarpingParameters_dewarpWidth_set
    __swig_getmethods__["dewarpWidth"] = _fisheye_dewarping.DewarpingParameters_dewarpWidth_get
    if _newclass:
        dewarpWidth = _swig_property(_fisheye_dewarping.DewarpingParameters_dewarpWidth_get, _fisheye_dewarping.DewarpingParameters_dewarpWidth_set)
    __swig_setmethods__["dewarpHeight"] = _fisheye_dewarping.DewarpingParameters_dewarpHeight_set
    __swig_getmethods__["dewarpHeight"] = _fisheye_dewarping.DewarpingParameters_dewarpHeight_get
    if _newclass:
        dewarpHeight = _swig_property(_fisheye_dewarping.DewarpingParameters_dewarpHeight_get, _fisheye_dewarping.DewarpingParameters_dewarpHeight_set)
    __swig_setmethods__["inRadius"] = _fisheye_dewarping.DewarpingParameters_inRadius_set
    __swig_getmethods__["inRadius"] = _fisheye_dewarping.DewarpingParameters_inRadius_get
    if _newclass:
        inRadius = _swig_property(_fisheye_dewarping.DewarpingParameters_inRadius_get, _fisheye_dewarping.DewarpingParameters_inRadius_set)
    __swig_setmethods__["centerRadius"] = _fisheye_dewarping.DewarpingParameters_centerRadius_set
    __swig_getmethods__["centerRadius"] = _fisheye_dewarping.DewarpingParameters_centerRadius_get
    if _newclass:
        centerRadius = _swig_property(_fisheye_dewarping.DewarpingParameters_centerRadius_get, _fisheye_dewarping.DewarpingParameters_centerRadius_set)
    __swig_setmethods__["outRadiusDiff"] = _fisheye_dewarping.DewarpingParameters_outRadiusDiff_set
    __swig_getmethods__["outRadiusDiff"] = _fisheye_dewarping.DewarpingParameters_outRadiusDiff_get
    if _newclass:
        outRadiusDiff = _swig_property(_fisheye_dewarping.DewarpingParameters_outRadiusDiff_get, _fisheye_dewarping.DewarpingParameters_outRadiusDiff_set)
    __swig_setmethods__["xOffset"] = _fisheye_dewarping.DewarpingParameters_xOffset_set
    __swig_getmethods__["xOffset"] = _fisheye_dewarping.DewarpingParameters_xOffset_get
    if _newclass:
        xOffset = _swig_property(_fisheye_dewarping.DewarpingParameters_xOffset_get, _fisheye_dewarping.DewarpingParameters_xOffset_set)
    __swig_setmethods__["bottomDistorsionFactor"] = _fisheye_dewarping.DewarpingParameters_bottomDistorsionFactor_set
    __swig_getmethods__["bottomDistorsionFactor"] = _fisheye_dewarping.DewarpingParameters_bottomDistorsionFactor_get
    if _newclass:
        bottomDistorsionFactor = _swig_property(_fisheye_dewarping.DewarpingParameters_bottomDistorsionFactor_get, _fisheye_dewarping.DewarpingParameters_bottomDistorsionFactor_set)
    __swig_destroy__ = _fisheye_dewarping.delete_DewarpingParameters
    __del__ = lambda self: None
DewarpingParameters_swigregister = _fisheye_dewarping.DewarpingParameters_swigregister
DewarpingParameters_swigregister(DewarpingParameters)

# This file is compatible with both classic and new-style classes.


